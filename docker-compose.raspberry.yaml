version: "3"

services:
  api:
    container_name: crypto_x_action_api
    build:
      context: ./
      dockerfile: ./server/Dockerfile-prod
    ports:
      - "4000:4000"
    environment:
      HTTP_PORT: 4000
      APP_GETAWAY_PORT: 5051
      NODE_ENV: production
      DB_NAME: main
    env_file:
      - ./server/.env
      - ./mongo/.mongo.env
    depends_on:
      database:
        condition: service_started
      redis:
        condition: service_healthy
    links:
      - database:database
    volumes:
      - /home/app/x_server/node_modules
    restart: "always"

  database:
    image: mongo:4.4.8
    container_name: crypto_x_action_database
    hostname: crypto_x_action_database
    env_file:
      - ./mongo/.mongo.env
    ports:
      - "27017:27017"
    volumes:
      - ./mongo/db:/data/db:rw
    #      - ./mongo/scripts/init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro
    tty: true
    restart: "always"
    entrypoint: [
      "/usr/bin/mongod",
      "--bind_ip_all",
      "--replSet", "rs0",
      "--journal",
      "--dbpath", "/data/db",
      "--setParameter", "transactionLifetimeLimitSeconds=5"
    ]

  database-setup:
    image: mongo:4.4.8
    container_name: crypto_x_action_database_setup
    env_file:
      - ./mongo/.mongo.env
    volumes:
      - ./mongo/scripts:/scripts
    links:
      - database:database
    depends_on:
      - database
    restart: "on-failure"
    entrypoint: [ "/scripts/setup-rs.sh" ]

  redis:
    image: redis:7.0.10-alpine
    container_name: crypto_x_action_redis
    ports:
      - "6373:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30
    tty: true
    restart: "always"
    command: ["redis-server", "--appendonly", "yes"] # start redis in persistent storage mode

volumes:
  redis-data: